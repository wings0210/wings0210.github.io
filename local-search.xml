<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ubuntu低版本系统以编译方式更新高版本linux内核</title>
    <link href="/2024/01/22/Ubuntu%E4%BD%8E%E7%89%88%E6%9C%AC%E7%B3%BB%E7%BB%9F%E4%BB%A5%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F%E6%9B%B4%E6%96%B0%E9%AB%98%E7%89%88%E6%9C%AClinux%E5%86%85%E6%A0%B8/"/>
    <url>/2024/01/22/Ubuntu%E4%BD%8E%E7%89%88%E6%9C%AC%E7%B3%BB%E7%BB%9F%E4%BB%A5%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F%E6%9B%B4%E6%96%B0%E9%AB%98%E7%89%88%E6%9C%AClinux%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<p>​<strong>因为低版本的Ubuntu系统（18.04）无法通过apt&#x2F;deb二进制包形式，更新linux内核至较高版本，故计划通过本地编译高版本内核实现编译安装更新。</strong></p><h1 id="以下为详细步骤："><a href="#以下为详细步骤：" class="headerlink" title="以下为详细步骤："></a>以下为详细步骤：</h1><p>1、前期准备</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#解压对应版本内核，以6.4.3为例</span><br><span class="hljs-attribute">tar</span> -xavf  linux-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>.tar.xz<br><span class="hljs-comment">#移动至/usr/src/目录</span><br><span class="hljs-attribute">sudo</span> mv linux-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>  /usr/src<br><span class="hljs-attribute">cd</span> /usr/src/linux-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p>2、环境准备</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install gcc make libncurses5-dev openssl libssl-dev <br>sudo apt-<span class="hljs-built_in">get</span> install build-essential<br>sudo apt-<span class="hljs-built_in">get</span> install libelf-dev<br>sudo apt-<span class="hljs-built_in">get</span> install libc6-dev<br>sudo apt-<span class="hljs-built_in">get</span> install bison<br>sudo apt-<span class="hljs-built_in">get</span> install flex<br></code></pre></td></tr></table></figure><p>3、  配置编译配置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#清除编译过程中产生的所有中间文件</span><br><span class="hljs-attribute">sudo</span> make mrproper <br><span class="hljs-attribute">sudo</span> make clean<br><span class="hljs-comment">#将已有的配置文件复制一份</span><br><span class="hljs-attribute">sudo</span> cp /boot/config-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">150</span>-generic .config<br><span class="hljs-comment">#进入配置菜单，直接选择 exit，并 yes 保存</span><br><span class="hljs-attribute">sudo</span> make menuconfig<br></code></pre></td></tr></table></figure><p>4、修改创建的 .config文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo gedit .config<br></code></pre></td></tr></table></figure><p>修改项为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CONFIG_MODULE_SIG_KEY</span>=<span class="hljs-string">&quot;certs/signing_key.pem&quot;</span><br><span class="hljs-attr">CONFIG_SYSTEM_TRUSTED_KEYS</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">CONFIG_SYSTEM_BLACKLIST_HASH_LIST</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">CONFIG_SYSTEM_REVOCATION_KEYS</span>=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>可选修改（有些内核版本太低，无法生成debug log，会报错）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CONFIG_DEBUG_INFO_BTF</span>=n<br></code></pre></td></tr></table></figure><p>5、开始编译内核镜像（数字为物理线程数，我选择的是12线程加速）</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> modules -j12<br></code></pre></td></tr></table></figure><p>6、安装内核模块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">make INSTALL_MOD_STRIP=<span class="hljs-number">1</span> modules_install<br></code></pre></td></tr></table></figure><p>7、打包引导程序</p><p>作用是把&#x2F;lib&#x2F;modules&#x2F;5.17.3中对应的.ko驱动打包到initrd.img文件中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mkinitramfs /lib/modules/<span class="hljs-number">6.4</span><span class="hljs-number">.3</span> -o /boot/initrd.img<span class="hljs-number">-6.4</span><span class="hljs-number">.3</span>-generic<br></code></pre></td></tr></table></figure><p>8、安装内核</p><p>这一步可以直接用sudo make install 替代</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cp</span> /usr/src/linux-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>/arch/x86/boot/bzImage    /boot/vmlinuz-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>-generic<br><span class="hljs-attribute">cp</span>  /usr/src/linux-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span>/System.map    /boot/System.map-<span class="hljs-number">6</span>.<span class="hljs-number">4</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>9、根据需要修改grub引导bios</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /boot/grub<br><span class="hljs-built_in">chmod</span> 777 grub.cfg<br><span class="hljs-comment">#根据需要修改，优先级可先不设置</span><br>sudo  gedit grub.cfg<br><span class="hljs-comment">#更新grub</span><br>update-grub2  <br></code></pre></td></tr></table></figure><p>10、重启系统，大功完成</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h1 id="注意：如果无法启动ubuntu，先进入原有内核，执行："><a href="#注意：如果无法启动ubuntu，先进入原有内核，执行：" class="headerlink" title="注意：如果无法启动ubuntu，先进入原有内核，执行："></a><strong>注意：如果无法启动ubuntu，先进入原有内核，执行：</strong></h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>mokutil<br>sudo mokutil --<span class="hljs-keyword">disable-validation</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>然后输入一个密码，后面会用到</p><ol><li>reboot重启</li><li>四个选项，选择change secure boot state</li><li>比如第一步设置的密码为123，则char[1] &#x3D;1,char[2]<br> &#x3D;2,就是第几个字符的意思</li></ol><p>5.选择yes</p><p>6.重启即可</p>]]></content>
    
    
    <categories>
      
      <category>Ubuntu/Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu/Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解面向对象的访问修饰符</title>
    <link href="/2024/01/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2024/01/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、访问修饰符号概述"><a href="#一、访问修饰符号概述" class="headerlink" title="一、访问修饰符号概述"></a>一、访问修饰符号概述</h1><h2 id="C-：强调类的内外部使用"><a href="#C-：强调类的内外部使用" class="headerlink" title="C++：强调类的内外部使用"></a>C++：强调类的内外部使用</h2><h3 id="阶梯级权限下降："><a href="#阶梯级权限下降：" class="headerlink" title="阶梯级权限下降："></a>阶梯级权限下降：</h3><p>1）无限制</p><p><strong>public-&gt;</strong></p><p>2）可被继承、不可被类外使用</p><p><strong>protected-&gt;</strong></p><p>3）不可被继承、不可类外使用</p><p><strong>private</strong></p><p>注：类的对象实例化后，对象参数的使用也属于类的外部使用</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>1.<strong>类的一个特征就是封装，public和private作用就是实现这一目的</strong></p><p>2.<strong>类的另一个特征就是继承，protected的作用就是实现这一目的</strong></p><hr><h2 id="Java：强调包间调用"><a href="#Java：强调包间调用" class="headerlink" title="Java：强调包间调用"></a>Java：强调包间调用</h2><h3 id="阶梯级权限下降：-1"><a href="#阶梯级权限下降：-1" class="headerlink" title="阶梯级权限下降："></a>阶梯级权限下降：</h3><p>1）无限制</p><p><strong>public-&gt;</strong></p><p>2）可被继承、不可被包外使用，可包内使用，可子类使用</p><p><strong>protected-&gt;</strong></p><p>3）可被继承、不可包外使用，可包内使用，不可子类使用</p><p><strong>default</strong></p><p>4）可被继承（但是无法通过子类对象访问，只能反射访问）、不可包外使用，不可包内使用，不可子类使用，</p><p>只可以类内部使用（不限制对象实例化）</p><p><strong>private</strong></p><p>详细图表：</p><p><img src="/img/java%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%E5%8F%B7.png"></p>]]></content>
    
    
    <categories>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL入门</title>
    <link href="/2024/01/10/SQL%E5%85%A5%E9%97%A8/"/>
    <url>/2024/01/10/SQL%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p><em><strong>SQL关键字分为普通关键字和DDL（数据定义语言）</strong></em></p><h1 id="二、DDL关键字"><a href="#二、DDL关键字" class="headerlink" title="二、DDL关键字"></a>二、DDL关键字</h1><p>在SQL语言中，DDL（数据定义语言）关键字的顺序通常是以下方式：</p><ol><li><p><em><strong>CREATE：用于创建数据库对象，如表、视图、索引等。</strong></em></p></li><li><p><em><strong>ALTER：用于修改数据库对象的结构，如添加、修改或删除列、约束等。</strong></em></p></li><li><p><em><strong>DROP：用于删除数据库对象，如表、视图、索引等。</strong></em></p></li><li><p><em><strong>TRUNCATE：用于截断表，即删除表中的所有数据。</strong></em></p></li><li><p><strong>RENAME：用于重命名数据库对象，如表、列等。</strong></p></li></ol><p>下面是一些具体的SQL语句示例，以说明这些DDL关键字的顺序：</p><ol><li>创建表（CREATE TABLE）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Customers (<br>    CustomerID <span class="hljs-type">INT</span>,<br>    CustomerName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    Email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br></code></pre></td></tr></table></figure><ol><li>修改表结构（ALTER TABLE）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Customers<br><span class="hljs-keyword">ADD</span> Phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><ol><li>删除表（DROP TABLE）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> Customers;<br></code></pre></td></tr></table></figure><ol><li>截断表（TRUNCATE TABLE）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> Customers;<br></code></pre></td></tr></table></figure><ol><li>重命名表（RENAME TABLE）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> Customers <span class="hljs-keyword">TO</span> Clients;<br></code></pre></td></tr></table></figure><h1 id="三、关键字顺序规则"><a href="#三、关键字顺序规则" class="headerlink" title="三、关键字顺序规则"></a>三、关键字顺序规则</h1><h2 id="1）关键字概述"><a href="#1）关键字概述" class="headerlink" title="1）关键字概述"></a>1）关键字概述</h2><p>以下是一些常见的关键字：</p><ol><li><p><em><strong>SELECT：用于从数据库中检索数据。</strong></em></p></li><li><p><em><strong>FROM：指定要检索数据的表或视图。</strong></em></p></li><li><p><em><strong>WHERE：用于指定检索条件。</strong></em></p></li><li><p><em><strong>GROUP BY：用于按指定的列对结果进行分组。</strong></em></p></li><li><p><em><strong>HAVING：用于指定分组后的条件。</strong></em></p></li><li><p><em><strong>ORDER BY：用于对结果进行排序。</strong></em></p></li><li><p><em><strong>INSERT INTO：用于向表中插入数据。</strong></em></p></li><li><p><em><strong>VALUES：指定要插入的值。</strong></em></p></li><li><p><em><strong>UPDATE：用于更新表中的数据。</strong></em></p></li><li><p><em><strong>SET：指定要更新的列和值。</strong></em></p></li><li><p><em><strong>DELETE FROM：用于从表中删除数据。</strong></em></p></li></ol><p>以下是一些具体的SQL语句示例，以说明这些关键字的顺序：</p><ol><li>检索数据（SELECT）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CustomerName, Email<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> Country <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;USA&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> CustomerName;<br></code></pre></td></tr></table></figure><ol><li>插入数据（INSERT INTO）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Customers (CustomerName, Email)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;john@example.com&#x27;</span>);<br></code></pre></td></tr></table></figure><ol><li>更新数据（UPDATE）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Customers<br><span class="hljs-keyword">SET</span> Email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;newemail@example.com&#x27;</span><br><span class="hljs-keyword">WHERE</span> CustomerID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ol><li>删除数据（DELETE FROM）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> CustomerID <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="2）具体顺序举例"><a href="#2）具体顺序举例" class="headerlink" title="2）具体顺序举例"></a>2）具体顺序举例</h2><p><em><strong>1、CRUD主体</strong></em></p><p><em><strong>2、联表+连接条件（内联只包含符合连接条件的记录，外联还包含不符合连接条件的记录）</strong></em></p><p><em><strong>3、CRUD条件</strong></em></p><p><em><strong>4、分组聚合条件（按照某列字段值进行分类记录）</strong></em></p><p><em><strong>5、分组筛选</strong></em></p><p><em><strong>6、排序</strong></em></p><p>具体示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c.CustomerName, o.OrderID, <span class="hljs-built_in">SUM</span>(od.Quantity <span class="hljs-operator">*</span> od.UnitPrice) <span class="hljs-keyword">AS</span> TotalAmount<br><span class="hljs-keyword">FROM</span> Customers c<br><span class="hljs-keyword">JOIN</span> Orders o <span class="hljs-keyword">ON</span> c.CustomerID <span class="hljs-operator">=</span> o.CustomerID<br><span class="hljs-keyword">JOIN</span> OrderDetails od <span class="hljs-keyword">ON</span> o.OrderID <span class="hljs-operator">=</span> od.OrderID<br><span class="hljs-keyword">WHERE</span> c.Country <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;USA&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c.CustomerName, o.OrderID<br><span class="hljs-keyword">HAVING</span> TotalAmount <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> TotalAmount <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h1 id="四、一些小细节"><a href="#四、一些小细节" class="headerlink" title="四、一些小细节"></a>四、一些小细节</h1><h2 id="1）左联和右联区别"><a href="#1）左联和右联区别" class="headerlink" title="1）左联和右联区别"></a>1）左联和右联区别</h2><p>左联：以左表为主表，即以左表的字段为键，来扩充交叉得新表</p><p>右联：以右表为主表，即以右表的字段为键，来扩充交叉得新表</p><h2 id="2）具体例子说明"><a href="#2）具体例子说明" class="headerlink" title="2）具体例子说明"></a>2）具体例子说明</h2><p>假设我们有以下数据：</p><p>Customers 表：</p><table><thead><tr><th>CustomerID</th><th>CustomerName</th></tr></thead><tbody><tr><td>1</td><td>John</td></tr><tr><td>2</td><td>Mary</td></tr><tr><td>3</td><td>David</td></tr></tbody></table><p>Orders 表：</p><table><thead><tr><th>OrderID</th><th>CustomerID</th><th>OrderDate</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>2022-01-01</td></tr><tr><td>102</td><td>2</td><td>2022-02-01</td></tr><tr><td>103</td><td>2</td><td>2022-03-01</td></tr><tr><td>104</td><td>4</td><td>2022-04-01</td></tr></tbody></table><p>使用左联接（LEFT JOIN）的示例查询语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Customers.CustomerName, Orders.OrderID<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> Orders <span class="hljs-keyword">ON</span> Customers.CustomerID <span class="hljs-operator">=</span> Orders.CustomerID;<br></code></pre></td></tr></table></figure><p>执行上述查询语句后，将返回以下结果：</p><table><thead><tr><th>CustomerName</th><th>OrderID</th></tr></thead><tbody><tr><td>John</td><td>101</td></tr><tr><td>Mary</td><td>102</td></tr><tr><td>Mary</td><td>103</td></tr><tr><td>David</td><td>NULL</td></tr></tbody></table><p>​        在这个结果中，我们可以看到左表 “Customers” 中的所有行都被返回，而右表 “Orders” 中只有符合连接条件的行被返回。由于 “David” 在 “Orders” 表中没有匹配的订单，所以对应的 “OrderID” 列显示为 NULL。</p><p>现在，让我们使用右联接（RIGHT JOIN）的示例查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Customers.CustomerName, Orders.OrderID<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> Orders <span class="hljs-keyword">ON</span> Customers.CustomerID <span class="hljs-operator">=</span> Orders.CustomerID;<br></code></pre></td></tr></table></figure><p>执行上述查询语句后，将返回以下结果：</p><table><thead><tr><th>CustomerName</th><th>OrderID</th></tr></thead><tbody><tr><td>John</td><td>101</td></tr><tr><td>Mary</td><td>102</td></tr><tr><td>Mary</td><td>103</td></tr><tr><td>NULL</td><td>104</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SQL相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web系统各部分关系</title>
    <link href="/2024/01/08/Web%E7%B3%BB%E7%BB%9F%E5%90%84%E9%83%A8%E5%88%86%E5%85%B3%E7%B3%BB/"/>
    <url>/2024/01/08/Web%E7%B3%BB%E7%BB%9F%E5%90%84%E9%83%A8%E5%88%86%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、web系统各个部分的关系图"><a href="#一、web系统各个部分的关系图" class="headerlink" title="一、web系统各个部分的关系图"></a>一、web系统各个部分的关系图</h1><p><img src="/img/web%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h1 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h1>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot前后端问题汇总</title>
    <link href="/2024/01/05/springboot%E5%89%8D%E5%90%8E%E7%AB%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2024/01/05/springboot%E5%89%8D%E5%90%8E%E7%AB%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Springboot后端问题汇总"><a href="#一、Springboot后端问题汇总" class="headerlink" title="一、Springboot后端问题汇总"></a>一、Springboot后端问题汇总</h1><p>1、导入开源项目步骤</p><p><em>1）</em>每个项目单独配置 <strong>maven的仓库conf</strong> 和 <strong>本地仓库的地址</strong></p><p><em>2）</em>每个项目单独配置项目结构下的jdk</p><p>2、maven的依赖配置文件<strong>pom.xml</strong>中 的 <strong>project头文件</strong> 报红问题</p><p>解决方案：</p><p>在设置-&gt;架构和DTD-&gt;忽略的模式和DTD下：</p><p>新增：<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a></p><h2 id="二、VUE前端项目启动部署步骤"><a href="#二、VUE前端项目启动部署步骤" class="headerlink" title="二、VUE前端项目启动部署步骤"></a>二、VUE前端项目启动部署步骤</h2><p>1、进入项目所在文件夹，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>如果已经通过npm&#x2F;cnpm 安装过节点，先删除出错的node_modules</p><p>2、接着执行启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run serve<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot前后端问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装VUE相关</title>
    <link href="/2024/01/03/ubuntu%E5%AE%89%E8%A3%85VUE%E7%9B%B8%E5%85%B3/"/>
    <url>/2024/01/03/ubuntu%E5%AE%89%E8%A3%85VUE%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="前提：已经安装好web容器nodejs和相关包管理工具，可参考hexo安装"><a href="#前提：已经安装好web容器nodejs和相关包管理工具，可参考hexo安装" class="headerlink" title="前提：已经安装好web容器nodejs和相关包管理工具，可参考hexo安装"></a>前提：已经安装好web容器nodejs和相关包管理工具，可参考hexo安装</h1><h1 id="一、全局安装Vue-js的脚手架工具vue-cli"><a href="#一、全局安装Vue-js的脚手架工具vue-cli" class="headerlink" title="一、全局安装Vue.js的脚手架工具vue-cli"></a>一、全局安装Vue.js的脚手架工具vue-cli</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm install -g @vue/cli<br></code></pre></td></tr></table></figure><h1 id="二、第一个Vue项目"><a href="#二、第一个Vue项目" class="headerlink" title="二、第一个Vue项目"></a>二、第一个Vue项目</h1><p>先设置npm注册表使用淘宝镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>1、在需要创建项目的目录下：(查看项目链接vue版本：sudo npm list vue)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vue create <span class="hljs-string">&quot;项目名&quot;</span><br></code></pre></td></tr></table></figure><p>2、进入所在目录下，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> my_vue_project<br></code></pre></td></tr></table></figure><p>3、启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm run serve<br></code></pre></td></tr></table></figure><p>（若启动vue3项目出错，尝试在项目目录使用命令：sudo npm i <a href="mailto:&#118;&#117;&#101;&#x40;&#x33;&#46;&#x33;&#46;&#52;">&#118;&#117;&#101;&#x40;&#x33;&#46;&#x33;&#46;&#52;</a>，将项目vue版本升级）</p><h1 id="三、进行Vue部署，安装代理服务器nginx"><a href="#三、进行Vue部署，安装代理服务器nginx" class="headerlink" title="三、进行Vue部署，安装代理服务器nginx"></a>三、进行Vue部署，安装代理服务器nginx</h1><p>1、先安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install nginx<br></code></pre></td></tr></table></figure><p>2、查看nginx状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status nginx<br></code></pre></td></tr></table></figure><p>其中nginx 相关命令：</p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>sudo systemctl stop nginx</td><td>停止</td></tr><tr><td>sudo systemctl start nginx</td><td>启动</td></tr><tr><td>sudo systemctl restart nginx</td><td>重启</td></tr><tr><td>sudo systemctl reload nginx</td><td>重新加载</td></tr><tr><td>sudo systemctl disable nginx</td><td>禁用Nginx</td></tr><tr><td>sudo systemctl enable nginx</td><td>启用</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>VUE相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VUE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker入门与精通</title>
    <link href="/2024/01/03/docker%E5%85%A5%E9%97%A8%E4%B8%8E%E7%B2%BE%E9%80%9A/"/>
    <url>/2024/01/03/docker%E5%85%A5%E9%97%A8%E4%B8%8E%E7%B2%BE%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<p>参考外部链接：<a href="http://www.dockerinfo.net/document">http://www.dockerinfo.net/document</a></p><h1 id="一、docker构成"><a href="#一、docker构成" class="headerlink" title="一、docker构成"></a>一、docker构成</h1><h2 id="docker包含："><a href="#docker包含：" class="headerlink" title="docker包含："></a>docker包含：</h2><p>1、docker容器（可写层，主要为应用程序，广义上也可以将docker容器视作docker）</p><p>2、docker镜像（可读层，环境，镜像可以有父镜像）</p><h2 id="docker概念："><a href="#docker概念：" class="headerlink" title="docker概念："></a>docker概念：</h2><p>可理解为对操作系统的虚拟化，基于linux内核的 Linux 容器（LXC）等技术（抽象版自制内核），具备高可用性</p><h1 id="二、docker镜像构造"><a href="#二、docker镜像构造" class="headerlink" title="二、docker镜像构造"></a>二、docker镜像构造</h1><h2 id="1、通过自定义Dockerfile，来使用-docker-build-命令构建，只要来源于本地系统环境"><a href="#1、通过自定义Dockerfile，来使用-docker-build-命令构建，只要来源于本地系统环境" class="headerlink" title="1、通过自定义Dockerfile，来使用 docker build 命令构建，只要来源于本地系统环境"></a>1、通过自定义Dockerfile，来使用 docker build 命令构建，只要来源于本地系统环境</h2><p>它将基于 Dockerfile 中的指令和上下文构建一个可运行的镜像。下面是 docker build 命令的基本用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build [OPTIONS] PATH<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">OPTIONS：是一些可选的参数，用于指定构建过程中的各种选项，例如镜像标签、构建缓存、网络设置等。常用的选项包括：<br>    -t, --tag：指定镜像的标签，格式为 &lt;repository&gt;:&lt;tag&gt;。<br>    --build-arg：传递构建时的参数给 Dockerfile。<br>    --no-cache：禁用构建过程中的缓存。<br>    --network：指定构建过程中使用的网络模式。<br><br>PATH：是包含 Dockerfile 的目录路径或 URL。这是构建上下文的路径，Docker 在构建过程中会将该路径下的文件和目录复制到镜像中。<br></code></pre></td></tr></table></figure><p>在执行 docker build 命令时，Docker 会读取 Dockerfile 中的指令，按照指令的顺序执行构建过程。Dockerfile 是一个文本文件，其中包含了构建镜像所需的指令和配置。常见的 Dockerfile 指令包括：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像，用于构建新镜像的起点。</td></tr><tr><td>RUN</td><td>在镜像中执行命令</td></tr><tr><td>COPY</td><td>将文件从构建上下文复制到镜像中</td></tr><tr><td>WORKDIR</td><td>设置工作目录</td></tr><tr><td>EXPOSE</td><td>声明容器运行时监听的端口</td></tr><tr><td>CMD</td><td>指定容器启动后要执行的命令</td></tr></tbody></table><h2 id="2、通过已有的镜像-容器，使用-docker-commit-命令构建，主要来源于远程仓库-可定制化已有容器"><a href="#2、通过已有的镜像-容器，使用-docker-commit-命令构建，主要来源于远程仓库-可定制化已有容器" class="headerlink" title="2、通过已有的镜像&#x2F;容器，使用 docker commit 命令构建，主要来源于远程仓库&#x2F;可定制化已有容器"></a>2、通过已有的镜像&#x2F;容器，使用 docker commit 命令构建，主要来源于远程仓库&#x2F;可定制化已有容器</h2><p>如在容器中添加 json 和 gem 两个应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@0b2616b0e5a8:/<span class="hljs-comment"># gem install json</span><br></code></pre></td></tr></table></figure><p>当结束后，我们使用 exit 来退出，现在我们的容器已经被我们改变了，使用 docker commit 命令来提交更新后的副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo docker commit -m <span class="hljs-string">&quot;Added json gem&quot;</span> -a <span class="hljs-string">&quot;Docker Newbee&quot;</span> 0b2616b0e5a8 ouruser/sinatra:v2<br>  4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c<br></code></pre></td></tr></table></figure><p>其中，-m 来指定提交的说明信息，跟我们使用的版本控制工具一样；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。</p><p>使用 docker images 来查看新创建的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo docker images<br>REPOSITORY          TAG     IMAGE ID       CREATED       VIRTUAL SIZE<br>training/sinatra    latest  5bc342fa0b91   10 hours ago  446.7 MB<br>ouruser/sinatra     v2      3c59e02ddd1a   10 hours ago  446.7 MB<br>ouruser/sinatra     latest  5db5f8471261   10 hours ago  446.7 MB<br><br><br></code></pre></td></tr></table></figure><p>之后，可以使用新的镜像来启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo docker run -t -i ouruser/sinatra:v2 /bin/bash<br></code></pre></td></tr></table></figure><h3 id="3、通过外部导入，使用-docker-import-命令构建，主要为本地文件系统"><a href="#3、通过外部导入，使用-docker-import-命令构建，主要为本地文件系统" class="headerlink" title="3、通过外部导入，使用 docker import 命令构建，主要为本地文件系统"></a>3、通过外部导入，使用 docker import 命令构建，主要为本地文件系统</h3><h1 id="三、构建docker容器"><a href="#三、构建docker容器" class="headerlink" title="三、构建docker容器"></a>三、构建docker容器</h1><p>构建 Docker 容器的命令是 docker run。<br>docker run 命令用于在 Docker 中创建和运行容器。下面是 docker run 命令的基本用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">OPTIONS：是一些可选的参数，用于配置容器的各种选项，例如端口映射、环境变量、数据卷等。常用的选项包括：<br>    -d, --detach：在后台运行容器。<br>    -p, --publish：将容器的端口映射到主机的端口。<br>    -e, --<span class="hljs-built_in">env</span>：设置容器的环境变量。<br>    -v, --volume：挂载主机的目录或数据卷到容器中。<br>    --name：为容器指定一个名称。<br>    --network：连接容器到指定的网络。<br><br>IMAGE：指定要基于的镜像名称或镜像 ID。<br><br>COMMAND：可选参数，用于在容器启动时执行的命令。<br><br>ARG...：可选参数，传递给容器启动命令的参数。<br></code></pre></td></tr></table></figure><p>通过执行 docker run 命令，Docker 会根据指定的镜像创建一个新的容器，并在容器内部运行指定的命令。容器可以是临时的，也可以是长期运行的。在容器内部，您可以运行应用程序、执行命令、访问文件系统等。</p>]]></content>
    
    
    <categories>
      
      <category>docker相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang交叉编译相关</title>
    <link href="/2024/01/02/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/"/>
    <url>/2024/01/02/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、跨平台交叉编译相关指令"><a href="#一、跨平台交叉编译相关指令" class="headerlink" title="一、跨平台交叉编译相关指令"></a>一、跨平台交叉编译相关指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">CGO_ENABLED=0 <br>GOOS=linux <br>GOARCH=amd64 <br>go build main.go<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th><th>case</th></tr></thead><tbody><tr><td>CGO_ENABLED</td><td>用于标识（声明） cgo 工具是否可用，存在交叉编译的情况时，cgo 工具是不可用的</td><td>交叉编译时，置0</td></tr><tr><td>GOOS</td><td>用于标识（声明）程序构建环境的目标操作系统</td><td>linux、windows、darwin</td></tr><tr><td>GOARCH</td><td>用于标识（声明）程序构建环境的目标计算架构</td><td>附表</td></tr><tr><td>go build</td><td>构建指令（常用：go build -o 索引目录 源文件）</td><td>-a：强制重新编译<br />-o：输出可执行文件路径</td></tr></tbody></table><p>附表：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>386</td><td>统一代表32位指令集系统</td></tr><tr><td>amd64</td><td>CISC指令集下的x86架构64位系统</td></tr><tr><td>arm</td><td>RISC指令集下的arm架构64位系统</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Golang入门与精通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何安装hexo</title>
    <link href="/2023/12/28/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85hexo/"/>
    <url>/2023/12/28/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前置环境安装"><a href="#一、前置环境安装" class="headerlink" title="一、前置环境安装"></a>一、前置环境安装</h1><h2 id="1、已经安装好nodejs-包括包管理工具npm、cnpm-、git（以上ubuntu系统下，均可以通过二进制apt-get安装）"><a href="#1、已经安装好nodejs-包括包管理工具npm、cnpm-、git（以上ubuntu系统下，均可以通过二进制apt-get安装）" class="headerlink" title="1、已经安装好nodejs(包括包管理工具npm、cnpm)、git（以上ubuntu系统下，均可以通过二进制apt-get安装）"></a>1、已经安装好<strong>nodejs</strong>(包括包管理工具<strong>npm</strong>、<strong>cnpm</strong>)、<strong>git</strong>（以上ubuntu系统下，均可以通过二进制apt-get安装）</h2><h2 id="附nodejs安装教程："><a href="#附nodejs安装教程：" class="headerlink" title="附nodejs安装教程："></a>附nodejs安装教程：</h2><p>先安装nodejs的管理工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install n -g<br></code></pre></td></tr></table></figure><p>相关参数指令（全局操作需要加上sudo）：</p><table><thead><tr><th>指令含义</th><th>指令</th></tr></thead><tbody><tr><td>安装最新长期支持版node</td><td>n lts</td></tr><tr><td>版本检查</td><td>node -v</td></tr><tr><td>安装指定版本</td><td>n 版本号</td></tr><tr><td>安装最新稳定版</td><td>n lts</td></tr><tr><td>卸载指定版本node</td><td>n rm 0.9.4 v0.10.0</td></tr><tr><td>查看已有的node版本，并切换</td><td>n</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="2、接着准备安装hexo脚架环境："><a href="#2、接着准备安装hexo脚架环境：" class="headerlink" title="2、接着准备安装hexo脚架环境："></a>2、接着准备安装hexo脚架环境：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo cnpm install -g hexo-cli@版本号<br></code></pre></td></tr></table></figure><h1 id="二、开始安装"><a href="#二、开始安装" class="headerlink" title="二、开始安装"></a>二、开始安装</h1><p>新建一个文件夹用于保存hexo博客对象node（有关于npm的操作，建议都使用cnpm操作代替）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span>build<br><span class="hljs-built_in">cd</span>build<br>hexo init<br></code></pre></td></tr></table></figure><p>如果遇到无法安装依赖的问题，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf node_modules &amp;&amp; npm install --force<br></code></pre></td></tr></table></figure><p>​</p><h1 id="三、本地部署（不想要本地部署，可跳过）"><a href="#三、本地部署（不想要本地部署，可跳过）" class="headerlink" title="三、本地部署（不想要本地部署，可跳过）"></a>三、本地部署（不想要本地部署，可跳过）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<span class="hljs-comment">#静态生成文件</span><br>hexo s<span class="hljs-comment">#启动</span><br><span class="hljs-comment">#如果遇到4000端口被占用情况，输入：</span><br>hexo s -p 端口号<br></code></pre></td></tr></table></figure><hr><h1 id="四、远程部署"><a href="#四、远程部署" class="headerlink" title="四、远程部署"></a>四、远程部署</h1><p>前置工作：完成github对本地主机间的RSA SSL密钥设置（远程仓库设置rsa公钥），保证后续git操作成功，并新建一个远程仓库</p><h2 id="修改配置文件和安装Git部署插件"><a href="#修改配置文件和安装Git部署插件" class="headerlink" title="修改配置文件和安装Git部署插件"></a>修改配置文件和安装Git部署插件</h2><p>1、进入Blog文件夹，找到_config.yml,</p><p>下滑到文件底部，填上如下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:wings0210/wings0210.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>2、接着输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h1 id="五、安装Fluid主题"><a href="#五、安装Fluid主题" class="headerlink" title="五、安装Fluid主题"></a>五、安装Fluid主题</h1><p>1、通过 npm&#x2F;cnpm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm/cnpm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>2、粘贴覆盖_config.fluid.yml和 _config.yml</p><p>3、粘贴覆盖Blog&#x2F;themes&#x2F;fluid&#x2F;source&#x2F;img</p><h2 id="生成静态文件和远程部署（后续更新修改，都是这三步）"><a href="#生成静态文件和远程部署（后续更新修改，都是这三步）" class="headerlink" title="生成静态文件和远程部署（后续更新修改，都是这三步）"></a>生成静态文件和远程部署（后续更新修改，都是这三步）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexoclean<br>hexog<br>hexod<br></code></pre></td></tr></table></figure><h2 id="访问和绑定域名"><a href="#访问和绑定域名" class="headerlink" title="访问和绑定域名"></a>访问和绑定域名</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/103813944">https://zhuanlan.zhihu.com/p/103813944</a></p><h1 id="五、后续环节"><a href="#五、后续环节" class="headerlink" title="五、后续环节"></a>五、后续环节</h1><p>相关markdown编辑器下载，<br>linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://file.babudiu.com/f/yXCL/Typora_Linux_0.11.18_amd64.deb<br></code></pre></td></tr></table></figure><p>windows：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>设置和优化相关主题参考：<a href="https://zhuanlan.zhihu.com/p/105584373">https://zhuanlan.zhihu.com/p/105584373</a></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一切的开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何开始第一篇博客</title>
    <link href="/2023/12/28/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/12/28/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、你的第一步"><a href="#一、你的第一步" class="headerlink" title="一、你的第一步"></a>一、你的第一步</h1><p>在博客根目录，命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexonew<span class="hljs-string">&quot;文章title&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>文章创建日期</td></tr><tr><td>title</td><td>网页文章标题</td></tr><tr><td>comments</td><td>文章评论功能是否启动</td></tr><tr><td>tags</td><td>文章标签</td></tr><tr><td>categories</td><td>文章分类</td></tr><tr><td>keywords</td><td>文章关键字</td></tr></tbody></table><p>接下来使用markdown工具编辑生成的md文件吧</p><h1 id="二、部署和提交"><a href="#二、部署和提交" class="headerlink" title="二、部署和提交"></a>二、部署和提交</h1><p>1、清除静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>2、生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>3、本地部署启动（前者）或者远程部署（后者）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s -p 端口号<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一切的开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
